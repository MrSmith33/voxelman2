import glfw3;
import enet;
import mdbx;
import vulkan.functions;
import vulkan.types;
import utils;
import tracy;
import kernel32;
import host;

void run()
{
	Client client;
	client.run();
}

u8[] frame_name = "Frame";
TracyLoc zone_loc1 = TracyLoc("glfwPollEvents", "update()", "main.vx", 83, 0x00AA00);
TracyLoc zone_loc2 = TracyLoc("sleep(1)", "update()", "main.vx", 85, 0x00CC00);

struct Client
{
	GLFWwindow* window;
	MDBX_env* mdbxEnv;

	VkInstance instance;
	VkPhysicalDevice physicalDevice;
	VkDebugUtilsMessengerEXT debugMessenger;

	enum WIDTH = 800;
	enum HEIGHT = 600;

	bool enableValidationLayers = true;
	u8*[1] validationLayers;

	bool isRunning = true;

	void run()
	{
		println("Start");
		init();
		mainLoop();
		free();
		println("Shutdown");
	}

	void init()
	{
		validationLayers[0] = "VK_LAYER_KHRONOS_validation";

		initWindow();
		initVulkan();

		enet_initialize();

		u8[] path = "test.db";
		mdbx_env_create(&mdbxEnv);
		mdbx_env_open(
			mdbxEnv,
			path.ptr,
			MDBX_env_flags_t.MDBX_NOSUBDIR |
			MDBX_env_flags_t.MDBX_EXCLUSIVE,
			//rwx_rwx_rwx
			0b110_110_110);
	}

	void free()
	{
		mdbx_env_close_ex(mdbxEnv);

		enet_deinitialize();

		if (enableValidationLayers) {
			vkDestroyDebugUtilsMessengerEXT(instance, debugMessenger, null);
		}

		vkDestroyInstance(instance, null);
		glfwDestroyWindow(window);
		glfwTerminate();
	}

	void mainLoop()
	{
		while(isRunning && !glfwWindowShouldClose(window)) {
			___tracy_emit_frame_mark();

			update();
		}
	}

	void update()
	{
		TracyZoneCtx tracy_ctx1 = ___tracy_emit_zone_begin(&zone_loc1, 1);
		glfwPollEvents();
		___tracy_emit_zone_end(tracy_ctx1);
		TracyZoneCtx tracy_ctx2 = ___tracy_emit_zone_begin(&zone_loc2, 1);
		Sleep(1);
		___tracy_emit_zone_end(tracy_ctx2);
	}

	void initWindow()
	{
		if (!glfwInit()) {
			println("GLFW init failed");
			isRunning = false;
			return;
		}

		// Do not create OpenGL context
		glfwWindowHint(GLFW_CLIENT_API, GLFW_NO_API);

		window = glfwCreateWindow(WIDTH, HEIGHT, "Voxelman", null, null);

		glfwSetWindowUserPointer(window, &this);
		glfwSetKeyCallback(window, &glfw_key_callback);
	}

	void initVulkan()
	{
		if (!glfwVulkanSupported) {
			println("Vulkan is not supported");
			isRunning = false;
			return;
		}

		loadGlobalLevelFunctions( cast(PFN_vkGetInstanceProcAddr)glfwGetInstanceProcAddress(null, "vkGetInstanceProcAddr"));

		createInstance();
		setupDebugMessenger();
		pickPhysicalDevice();
	}

	void createInstance()
	{
		VkApplicationInfo appInfo;
		VkStructureType sType = cast(VkStructureType)VkStructureType.VK_STRUCTURE_TYPE_APPLICATION_INFO;
		appInfo.pApplicationName = "Hello Triangle";
		appInfo.applicationVersion = VK_MAKE_VERSION(1, 0, 0);
		appInfo.pEngineName = "Voxelman";
		appInfo.engineVersion = VK_MAKE_VERSION(2, 0, 0);
		appInfo.apiVersion = VK_API_VERSION_1_0;

		VkInstanceCreateInfo createInfo;
		createInfo.sType = cast(VkStructureType)VkStructureType.VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO;
		createInfo.pApplicationInfo = &appInfo;

		Array[u8*] extensions = getRequiredExtensions;

		println("Requesting ", extensions.length, " extensions:");
		for (i32 i; i < extensions.length; ++i) {
			println("  ", extensions.bufPtr[i].fromStringz);
		}

		createInfo.enabledExtensionCount = extensions.length;
		createInfo.ppEnabledExtensionNames = extensions.bufPtr;

		VkDebugUtilsMessengerCreateInfoEXT debugCreateInfo;
		if (enableValidationLayers) {
			if (!checkValidationLayerSupport()) {
				println("Validation layers requested, but not available!");
			} else {
				createInfo.enabledLayerCount = cast(u32)validationLayers.length;
				createInfo.ppEnabledLayerNames = validationLayers.ptr;
				println("Validation ", createInfo.enabledLayerCount, " ", createInfo.ppEnabledLayerNames[0], " ", this);

				populateDebugMessengerCreateInfo(&debugCreateInfo);
				createInfo.pNext = &debugCreateInfo;
			}
		} else {
			createInfo.enabledLayerCount = 0;
		}

		println("vkCreateInstance ", cast(void*)vkCreateInstance, " ", cast(void*)&createInfo, " ", cast(void*)&appInfo);
		i32 vkCreateInstanceResult = cast(i32)vkCreateInstance(&createInfo, null, &instance);
		if (vkCreateInstanceResult != VK_SUCCESS) {
			println("vkCreateInstance failed: ", vkCreateInstanceResult);
			isRunning = false;
			return;
		}
		println("VkInstance ", cast(void*)instance);
		loadInstanceLevelFunctions(instance);

		{
			u32 extensionCount;
			vkEnumerateInstanceExtensionProperties(null, &extensionCount, null);
			println("\n", extensionCount, " extensions supported");
			VkExtensionProperties[] extensions = makeArray[VkExtensionProperties](extensionCount);
			vkEnumerateInstanceExtensionProperties(null, &extensionCount, extensions.ptr);
			for (i32 i; i < extensionCount; ++i) {
				println("  ", extensions[i].extensionName.ptr.fromStringz, " ", extensions[i].specVersion);
			}
			freeArray[VkExtensionProperties](extensions);
		}
	}

	void populateDebugMessengerCreateInfo(VkDebugUtilsMessengerCreateInfoEXT* createInfo) {
		createInfo.sType = VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT;
		createInfo.messageSeverity = VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT;
		createInfo.messageType = VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT;
		createInfo.pfnUserCallback = &debugCallback; // compiler bug
		createInfo.pUserData = null; // Optional
	}

	void setupDebugMessenger() {
		if (!enableValidationLayers) return;

		VkDebugUtilsMessengerCreateInfoEXT createInfo;
		populateDebugMessengerCreateInfo(&createInfo);

		if (vkCreateDebugUtilsMessengerEXT(instance, &createInfo, null, &debugMessenger) != VK_SUCCESS) {
			println("failed to set up debug messenger!");
			isRunning = false;
		}
	}

	bool checkValidationLayerSupport() {
		u32 layerCount;
		vkEnumerateInstanceLayerProperties(&layerCount, null);
		VkLayerProperties[] availableLayers = makeArray[VkLayerProperties](layerCount);
		vkEnumerateInstanceLayerProperties(&layerCount, availableLayers.ptr);
		println("\n", layerCount, " layers supported");

		bool hasAllLayers = checkLayers(validationLayers, availableLayers);

		println("has VK_LAYER_KHRONOS_validation: ", hasAllLayers);
		freeArray[VkLayerProperties](availableLayers);

		return hasAllLayers;
	}

	Array[u8*] getRequiredExtensions() {
		Array[u8*] extensions;

		u32 glfwExtensionCount = 0;
		u8** glfwExtensions = glfwGetRequiredInstanceExtensions(&glfwExtensionCount);

		extensions.putArray(glfwExtensions[0..glfwExtensionCount]);

		if (enableValidationLayers) {
			extensions.put(VK_EXT_DEBUG_UTILS_EXTENSION_NAME.ptr);
		}

		return extensions;
	}

	void pickPhysicalDevice() {
		u32 deviceCount = 0;
		vkEnumeratePhysicalDevices(instance, &deviceCount, null);

		if (deviceCount == 0) {
			println("failed to find GPUs with Vulkan support!");
			isRunning = false;
			return;
		}

		VkPhysicalDevice[] devices = makeArray[VkPhysicalDevice](deviceCount);
		vkEnumeratePhysicalDevices(instance, &deviceCount, devices.ptr);

		println("Found ", deviceCount, " devices:");

		i64 bestDeviceScore = 0;
		for (u32 i; i < deviceCount; ++i) {
			i64 deviceScore = rateDeviceSuitability(devices[i]);
			if (deviceScore > bestDeviceScore) {
				bestDeviceScore = deviceScore;
				physicalDevice = devices[i];
			}
		}

		freeArray[VkPhysicalDevice](devices);

		if (physicalDevice == null) {
			println("failed to find a suitable GPU!");
			isRunning = false;
			return;
		}

		println("Selected device ", physicalDevice, " with score ", bestDeviceScore);
	}

	// negative score means that device is unsuitable
	i64 rateDeviceSuitability(VkPhysicalDevice device) {
		VkPhysicalDeviceProperties deviceProperties;
		vkGetPhysicalDeviceProperties(device, &deviceProperties);

		println("  ", deviceProperties.deviceName.ptr.fromStringz);

		VkPhysicalDeviceFeatures deviceFeatures;
		vkGetPhysicalDeviceFeatures(device, &deviceFeatures);

		i64 score = 0;

		if (deviceProperties.deviceType == VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU) {
			score += 1000;
		}

		QueueFamilyIndices indices = findQueueFamilies(device);

		if (!indices.isComplete) return -1; // unsuitable

		return score;
	}

	QueueFamilyIndices findQueueFamilies(VkPhysicalDevice device) {
		QueueFamilyIndices indices;

		u32 queueFamilyCount = 0;
		vkGetPhysicalDeviceQueueFamilyProperties(device, &queueFamilyCount, null);

		VkQueueFamilyProperties[] queueFamilies = makeArray[VkQueueFamilyProperties](queueFamilyCount);
		vkGetPhysicalDeviceQueueFamilyProperties(device, &queueFamilyCount, queueFamilies.ptr);

		for (u32 i; i < queueFamilyCount; ++i) {
			VkQueueFamilyProperties queueFamily = queueFamilies[i];
			if (queueFamily.queueFlags & VK_QUEUE_GRAPHICS_BIT) {
				indices.presentFamilies |= QueueFamily.graphics;
				indices.graphicsFamily = i;
			}
			if (indices.isComplete) break;
		}

		freeArray[VkQueueFamilyProperties](queueFamilies);

		return indices;
	}

	//bool isDeviceSuitable(VkPhysicalDevice device) {
	//	VkPhysicalDeviceProperties deviceProperties;
	//	vkGetPhysicalDeviceProperties(device, &deviceProperties);

	//	VkPhysicalDeviceFeatures deviceFeatures;
	//	vkGetPhysicalDeviceFeatures(device, &deviceFeatures);
	//	return true;
	//}

	void onKey(i32 key, i32 scancode, i32 action, i32 mods)
	{
		println("onKey key:", key, " scancode:", scancode, " action:", action, " mods:", mods);
	}
}

struct QueueFamilyIndices {
	QueueFamily presentFamilies; // specifies which families have valid index
	u32 graphicsFamily;

	bool isComplete() {
		return (presentFamilies & QueueFamily.graphics) != 0;
	}
}

enum QueueFamily : u32 {
	graphics = 0b0000_0001,
}

u32 debugCallback(
	VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity,
	VkDebugUtilsMessageTypeFlagsEXT messageType,
	VkDebugUtilsMessengerCallbackDataEXT* pCallbackData,
	void* pUserData) {

	println("validation layer: ", pCallbackData.pMessage.fromStringz);

	return VK_FALSE;
}

bool checkLayers(u8*[] requestedLayers, VkLayerProperties[] availableLayers)
{
	for (i32 i; i < requestedLayers.length; ++i) {
		u8[] requestedLayer = requestedLayers[i].fromStringz;
		//println("req ", requestedLayer);
		bool layerFound = false;
		for (i32 j; j < availableLayers.length; ++j) {
			u8[] name = availableLayers[j].layerName.ptr.fromStringz;
			//println("  ", name, " ", availableLayers[j].specVersion, " ", availableLayers[j].implementationVersion, " ", availableLayers[j].description.ptr.fromStringz);
			if (equal[u8[]](name, requestedLayer)) {
				layerFound = true;
				break;
			}
		}
		if (!layerFound) {
			return false;
		}
	}
	return true;
}

void glfw_key_callback(GLFWwindow* window, i32 key, i32 scancode, i32 action, i32 mods)
{
	Client* client = cast(Client*)glfwGetWindowUserPointer(window);
	client.onKey(key, scancode, action, mods);
}
