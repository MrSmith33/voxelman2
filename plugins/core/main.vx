import glfw3;
import enet;
import mdbx;
import utils;

void run()
{
	Client client;
	client.run();
}

struct Client
{
	GLFWwindow* window;
	MDBX_env* mdbxEnv;

	enum WIDTH = 800;
	enum HEIGHT = 600;

	bool isRunning = true;

	void run()
	{
		println("Start");
		init();
		mainLoop();
		free();
		println("Shutdown");
	}

	void init()
	{
		initWindow();
		initVulkan();

		enet_initialize();

		u8[] path = "test.db";
		mdbx_env_create(&mdbxEnv);
		mdbx_env_open(
			mdbxEnv,
			path.ptr,
			MDBX_env_flags_t.MDBX_NOSUBDIR |
			MDBX_env_flags_t.MDBX_EXCLUSIVE,
			//rwx_rwx_rwx
			0b110_110_110);
	}

	void free()
	{
		mdbx_env_close_ex(mdbxEnv);

		enet_deinitialize();

		glfwDestroyWindow(window);
		glfwTerminate();
	}

	void mainLoop()
	{
		while(isRunning && !glfwWindowShouldClose(window)) {
			glfwPollEvents();
		}
	}

	void initWindow()
	{
		// Do not create OpenGL context
		glfwWindowHint(GLFW_CLIENT_API, GLFW_NO_API);

		window = glfwCreateWindow(WIDTH, HEIGHT, "Voxelman", null, null);
	}

	void initVulkan()
	{
		if (!glfwVulkanSupported) {
			println("Vulkan is not supported");
			isRunning = false;
			return;
		}

		//u32 extensionCount;
		//vkEnumerateInstanceExtensionProperties(null, &extensionCount, null);
		//println(extensionCount, " extensions supported");
	}
}
