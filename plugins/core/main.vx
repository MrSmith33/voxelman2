import glfw3;
import enet;
import mdbx;
import vulkan.functions;
import vulkan.types;
import utils;
import tracy;
import kernel32;

void run()
{
	Client client;
	client.run();
}

u8[] frame_name = "Frame";
TracyLoc zone_loc1 = TracyLoc("glfwPollEvents", "update()", "main.vx", 83, 0x00AA00);
TracyLoc zone_loc2 = TracyLoc("sleep(1)", "update()", "main.vx", 85, 0x00CC00);

struct Client
{
	GLFWwindow* window;
	MDBX_env* mdbxEnv;

	VkInstance instance;

	enum WIDTH = 800;
	enum HEIGHT = 600;

	bool enableValidationLayers = true;

	bool isRunning = true;

	void run()
	{
		println("Start");
		init();
		mainLoop();
		free();
		println("Shutdown");
	}

	void init()
	{
		initWindow();
		initVulkan();

		enet_initialize();

		u8[] path = "test.db";
		mdbx_env_create(&mdbxEnv);
		mdbx_env_open(
			mdbxEnv,
			path.ptr,
			MDBX_env_flags_t.MDBX_NOSUBDIR |
			MDBX_env_flags_t.MDBX_EXCLUSIVE,
			//rwx_rwx_rwx
			0b110_110_110);
	}

	void free()
	{
		mdbx_env_close_ex(mdbxEnv);

		enet_deinitialize();
		vkDestroyInstance(instance, null);

		glfwDestroyWindow(window);
		glfwTerminate();
	}

	void mainLoop()
	{
		while(isRunning && !glfwWindowShouldClose(window)) {
			___tracy_emit_frame_mark();

			update();
		}
	}

	void update()
	{
		TracyZoneCtx tracy_ctx1 = ___tracy_emit_zone_begin(&zone_loc1, 1);
		glfwPollEvents();
		___tracy_emit_zone_end(tracy_ctx1);
		TracyZoneCtx tracy_ctx2 = ___tracy_emit_zone_begin(&zone_loc2, 1);
		Sleep(1);
		___tracy_emit_zone_end(tracy_ctx2);
	}

	void initWindow()
	{
		if (!glfwInit()) {
			println("GLFW init failed");
			isRunning = false;
			return;
		}

		// Do not create OpenGL context
		glfwWindowHint(GLFW_CLIENT_API, GLFW_NO_API);

		window = glfwCreateWindow(WIDTH, HEIGHT, "Voxelman", null, null);
	}

	void initVulkan()
	{
		if (!glfwVulkanSupported) {
			println("Vulkan is not supported");
			isRunning = false;
			return;
		}

		loadGlobalLevelFunctions( cast(PFN_vkGetInstanceProcAddr)glfwGetInstanceProcAddress(null, "vkGetInstanceProcAddr"));

		createInstance();
	}

	void createInstance()
	{
		VkApplicationInfo appInfo;
		VkStructureType sType = cast(VkStructureType)VkStructureType.VK_STRUCTURE_TYPE_APPLICATION_INFO;
		appInfo.pApplicationName = "Hello Triangle";
		appInfo.applicationVersion = VK_MAKE_VERSION(1, 0, 0);
		appInfo.pEngineName = "Voxelman";
		appInfo.engineVersion = VK_MAKE_VERSION(2, 0, 0);
		appInfo.apiVersion = VK_API_VERSION_1_0;

		VkInstanceCreateInfo createInfo;
		createInfo.sType = cast(VkStructureType)VkStructureType.VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO;
		createInfo.pApplicationInfo = &appInfo;

		u32 glfwExtensionCount = 0;
		u8** glfwExtensions;
		glfwExtensions = glfwGetRequiredInstanceExtensions(&glfwExtensionCount);

		createInfo.enabledExtensionCount = glfwExtensionCount;
		createInfo.ppEnabledExtensionNames = glfwExtensions;

		createInfo.enabledLayerCount = 0;

		if (vkCreateInstance(&createInfo, null, &instance) != VK_SUCCESS) {
			println("vkCreateInstance failed");
			isRunning = false;
			return;
		}
		//println("VkInstance ", cast(void*)instance);
		loadInstanceLevelFunctions(instance);

		u32 extensionCount;
		vkEnumerateInstanceExtensionProperties(null, &extensionCount, null);
		println(extensionCount, " extensions supported");
		//VkExtensionProperties[] extensions = makeArray[VkExtensionProperties](extensionCount);
		//vkEnumerateInstanceExtensionProperties(null, &extensionCount, extensions.ptr);
		//for (i32 i; i < extensionCount; ++i) {
		//	println(fromStringz(extensions[i].extensionName.ptr), " ", extensions[i].specVersion);
		//}
		//freeArray[VkExtensionProperties](extensions);
	}
}
