/// Some bits are taken from EruptedD https://github.com/ParticlePeter/ErupteD
/// Copyright 2015-2016 The Khronos Group Inc.; Copyright 2016 Alex Parrill, Peter Particle.
struct VkExtensionProperties;
struct VkInstanceCreateInfo;
struct VkAllocationCallbacks;
struct VkLayerProperties;
alias PFN_vkVoidFunction = void function();
struct VkInstance_handle; alias VkInstance = VkInstance_handle*;

enum VkResult : i32 {
    VK_SUCCESS                                                   = 0,
    VK_NOT_READY                                                 = 1,
    VK_TIMEOUT                                                   = 2,
    VK_EVENT_SET                                                 = 3,
    VK_EVENT_RESET                                               = 4,
    VK_INCOMPLETE                                                = 5,
    VK_ERROR_OUT_OF_HOST_MEMORY                                  = -1,
    VK_ERROR_OUT_OF_DEVICE_MEMORY                                = -2,
    VK_ERROR_INITIALIZATION_FAILED                               = -3,
    VK_ERROR_DEVICE_LOST                                         = -4,
    VK_ERROR_MEMORY_MAP_FAILED                                   = -5,
    VK_ERROR_LAYER_NOT_PRESENT                                   = -6,
    VK_ERROR_EXTENSION_NOT_PRESENT                               = -7,
    VK_ERROR_FEATURE_NOT_PRESENT                                 = -8,
    VK_ERROR_INCOMPATIBLE_DRIVER                                 = -9,
    VK_ERROR_TOO_MANY_OBJECTS                                    = -10,
    VK_ERROR_FORMAT_NOT_SUPPORTED                                = -11,
    VK_ERROR_FRAGMENTED_POOL                                     = -12,
    VK_ERROR_UNKNOWN                                             = -13,
    VK_ERROR_OUT_OF_POOL_MEMORY                                  = -1000069000,
    VK_ERROR_INVALID_EXTERNAL_HANDLE                             = -1000072003,
    VK_ERROR_FRAGMENTATION                                       = -1000161000,
    VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS                      = -1000257000,
    VK_ERROR_SURFACE_LOST_KHR                                    = -1000000000,
    VK_ERROR_NATIVE_WINDOW_IN_USE_KHR                            = -1000000001,
    VK_SUBOPTIMAL_KHR                                            = 1000001003,
    VK_ERROR_OUT_OF_DATE_KHR                                     = -1000001004,
    VK_ERROR_INCOMPATIBLE_DISPLAY_KHR                            = -1000003001,
    VK_ERROR_VALIDATION_FAILED_EXT                               = -1000011001,
    VK_ERROR_INVALID_SHADER_NV                                   = -1000012000,
    VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT        = -1000158000,
    VK_ERROR_NOT_PERMITTED_EXT                                   = -1000174001,
    VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT                 = -1000255000,
    VK_THREAD_IDLE_KHR                                           = 1000268000,
    VK_THREAD_DONE_KHR                                           = 1000268001,
    VK_OPERATION_DEFERRED_KHR                                    = 1000268002,
    VK_OPERATION_NOT_DEFERRED_KHR                                = 1000268003,
    VK_PIPELINE_COMPILE_REQUIRED_EXT                             = 1000297000,
    VK_ERROR_OUT_OF_POOL_MEMORY_KHR                              = VK_ERROR_OUT_OF_POOL_MEMORY,
    VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR                         = VK_ERROR_INVALID_EXTERNAL_HANDLE,
    VK_ERROR_FRAGMENTATION_EXT                                   = VK_ERROR_FRAGMENTATION,
    VK_ERROR_INVALID_DEVICE_ADDRESS_EXT                          = VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS,
    VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR                  = VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS,
    VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT                       = VK_PIPELINE_COMPILE_REQUIRED_EXT,
    VK_RESULT_BEGIN_RANGE                                        = VK_ERROR_UNKNOWN,
    VK_RESULT_END_RANGE                                          = VK_INCOMPLETE,
    VK_RESULT_RANGE_SIZE                                         = VK_INCOMPLETE - VK_ERROR_UNKNOWN + 1,
    VK_RESULT_MAX_ENUM                                           = 0x7FFFFFFF
}

enum VK_SUCCESS                                                  = VkResult.VK_SUCCESS;
enum VK_NOT_READY                                                = VkResult.VK_NOT_READY;
enum VK_TIMEOUT                                                  = VkResult.VK_TIMEOUT;
enum VK_EVENT_SET                                                = VkResult.VK_EVENT_SET;
enum VK_EVENT_RESET                                              = VkResult.VK_EVENT_RESET;
enum VK_INCOMPLETE                                               = VkResult.VK_INCOMPLETE;
enum VK_ERROR_OUT_OF_HOST_MEMORY                                 = VkResult.VK_ERROR_OUT_OF_HOST_MEMORY;
enum VK_ERROR_OUT_OF_DEVICE_MEMORY                               = VkResult.VK_ERROR_OUT_OF_DEVICE_MEMORY;
enum VK_ERROR_INITIALIZATION_FAILED                              = VkResult.VK_ERROR_INITIALIZATION_FAILED;
enum VK_ERROR_DEVICE_LOST                                        = VkResult.VK_ERROR_DEVICE_LOST;
enum VK_ERROR_MEMORY_MAP_FAILED                                  = VkResult.VK_ERROR_MEMORY_MAP_FAILED;
enum VK_ERROR_LAYER_NOT_PRESENT                                  = VkResult.VK_ERROR_LAYER_NOT_PRESENT;
enum VK_ERROR_EXTENSION_NOT_PRESENT                              = VkResult.VK_ERROR_EXTENSION_NOT_PRESENT;
enum VK_ERROR_FEATURE_NOT_PRESENT                                = VkResult.VK_ERROR_FEATURE_NOT_PRESENT;
enum VK_ERROR_INCOMPATIBLE_DRIVER                                = VkResult.VK_ERROR_INCOMPATIBLE_DRIVER;
enum VK_ERROR_TOO_MANY_OBJECTS                                   = VkResult.VK_ERROR_TOO_MANY_OBJECTS;
enum VK_ERROR_FORMAT_NOT_SUPPORTED                               = VkResult.VK_ERROR_FORMAT_NOT_SUPPORTED;
enum VK_ERROR_FRAGMENTED_POOL                                    = VkResult.VK_ERROR_FRAGMENTED_POOL;
enum VK_ERROR_UNKNOWN                                            = VkResult.VK_ERROR_UNKNOWN;
enum VK_ERROR_OUT_OF_POOL_MEMORY                                 = VkResult.VK_ERROR_OUT_OF_POOL_MEMORY;
enum VK_ERROR_INVALID_EXTERNAL_HANDLE                            = VkResult.VK_ERROR_INVALID_EXTERNAL_HANDLE;
enum VK_ERROR_FRAGMENTATION                                      = VkResult.VK_ERROR_FRAGMENTATION;
enum VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS                     = VkResult.VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS;
enum VK_ERROR_SURFACE_LOST_KHR                                   = VkResult.VK_ERROR_SURFACE_LOST_KHR;
enum VK_ERROR_NATIVE_WINDOW_IN_USE_KHR                           = VkResult.VK_ERROR_NATIVE_WINDOW_IN_USE_KHR;
enum VK_SUBOPTIMAL_KHR                                           = VkResult.VK_SUBOPTIMAL_KHR;
enum VK_ERROR_OUT_OF_DATE_KHR                                    = VkResult.VK_ERROR_OUT_OF_DATE_KHR;
enum VK_ERROR_INCOMPATIBLE_DISPLAY_KHR                           = VkResult.VK_ERROR_INCOMPATIBLE_DISPLAY_KHR;
enum VK_ERROR_VALIDATION_FAILED_EXT                              = VkResult.VK_ERROR_VALIDATION_FAILED_EXT;
enum VK_ERROR_INVALID_SHADER_NV                                  = VkResult.VK_ERROR_INVALID_SHADER_NV;
enum VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT       = VkResult.VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT;
enum VK_ERROR_NOT_PERMITTED_EXT                                  = VkResult.VK_ERROR_NOT_PERMITTED_EXT;
enum VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT                = VkResult.VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT;
enum VK_THREAD_IDLE_KHR                                          = VkResult.VK_THREAD_IDLE_KHR;
enum VK_THREAD_DONE_KHR                                          = VkResult.VK_THREAD_DONE_KHR;
enum VK_OPERATION_DEFERRED_KHR                                   = VkResult.VK_OPERATION_DEFERRED_KHR;
enum VK_OPERATION_NOT_DEFERRED_KHR                               = VkResult.VK_OPERATION_NOT_DEFERRED_KHR;
enum VK_PIPELINE_COMPILE_REQUIRED_EXT                            = VkResult.VK_PIPELINE_COMPILE_REQUIRED_EXT;
enum VK_ERROR_OUT_OF_POOL_MEMORY_KHR                             = VkResult.VK_ERROR_OUT_OF_POOL_MEMORY_KHR;
enum VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR                        = VkResult.VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR;
enum VK_ERROR_FRAGMENTATION_EXT                                  = VkResult.VK_ERROR_FRAGMENTATION_EXT;
enum VK_ERROR_INVALID_DEVICE_ADDRESS_EXT                         = VkResult.VK_ERROR_INVALID_DEVICE_ADDRESS_EXT;
enum VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR                 = VkResult.VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR;
enum VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT                      = VkResult.VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT;
enum VK_RESULT_BEGIN_RANGE                                       = VkResult.VK_RESULT_BEGIN_RANGE;
enum VK_RESULT_END_RANGE                                         = VkResult.VK_RESULT_END_RANGE;
enum VK_RESULT_RANGE_SIZE                                        = VkResult.VK_RESULT_RANGE_SIZE;
enum VK_RESULT_MAX_ENUM                                          = VkResult.VK_RESULT_MAX_ENUM;

// VK_VERSION_1_0
alias PFN_vkCreateInstance                                                  = VkResult  function( VkInstanceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkInstance* pInstance );
alias PFN_vkGetInstanceProcAddr                                             = PFN_vkVoidFunction  function( VkInstance instance, u8* pName );
alias PFN_vkEnumerateInstanceExtensionProperties                            = VkResult  function( u8* pLayerName, u32* pPropertyCount, VkExtensionProperties* pProperties );
alias PFN_vkEnumerateInstanceLayerProperties                                = VkResult  function( u32* pPropertyCount, VkLayerProperties* pProperties );

// VK_VERSION_1_1
alias PFN_vkEnumerateInstanceVersion                                        = VkResult  function( u32* pApiVersion );

// VK_VERSION_1_0
PFN_vkCreateInstance                                                  vkCreateInstance;
PFN_vkGetInstanceProcAddr                                             vkGetInstanceProcAddr;
PFN_vkEnumerateInstanceExtensionProperties                            vkEnumerateInstanceExtensionProperties;
PFN_vkEnumerateInstanceLayerProperties                                vkEnumerateInstanceLayerProperties;

// VK_VERSION_1_1
PFN_vkEnumerateInstanceVersion                                        vkEnumerateInstanceVersion;

/// sets vkCreateInstance function pointer and acquires basic functions to retrieve information about the implementation
/// and create an instance: vkEnumerateInstanceExtensionProperties, vkEnumerateInstanceLayerProperties, vkCreateInstance
void loadGlobalLevelFunctions( PFN_vkGetInstanceProcAddr getInstanceProcAddr ) {
    vkGetInstanceProcAddr = getInstanceProcAddr;

    // VK_VERSION_1_0
    vkCreateInstance                       = cast( PFN_vkCreateInstance                       ) vkGetInstanceProcAddr( null, "vkCreateInstance" );
    vkEnumerateInstanceExtensionProperties = cast( PFN_vkEnumerateInstanceExtensionProperties ) vkGetInstanceProcAddr( null, "vkEnumerateInstanceExtensionProperties" );
    vkEnumerateInstanceLayerProperties     = cast( PFN_vkEnumerateInstanceLayerProperties     ) vkGetInstanceProcAddr( null, "vkEnumerateInstanceLayerProperties" );

    // VK_VERSION_1_1
    vkEnumerateInstanceVersion             = cast( PFN_vkEnumerateInstanceVersion             ) vkGetInstanceProcAddr( null, "vkEnumerateInstanceVersion" );
}
