module core.utils;

import core.kernel32;
import core.mimalloc;
import core.lz4;
import core.host;

void __init_utils() {
	QueryPerformanceFrequency(&_ticksPerSecond);
}

u8[] fromStringz(u8* cString) {
	if (cString == null) return null;
	u8* cursor = cString;
	while(*cursor) ++cursor;
	u64 length = cast(u64)(cursor - cString);
	return cString[0..length];
}

bool equal[T](T a, T b) #inline {
	#if($isSlice(T)) {
		alias Base = $baseOf(T);
		return are_arrays_equal[Base](a, b);
	} else {
		return a == b;
	}
}

bool are_arrays_equal[T](T[] a, T[] b) {
	if (a.length != b.length) return false;
	for (u64 i; i < a.length; ++i) {
		if (!equal[T](a[i], b[i])) return false;
	}
	return true;
}

bool contains[T](T[] array, T needle) {
	for (u64 i; i < array.length; ++i) {
		if (equal[T](array[i], needle)) return true;
	}
	return false;
}

struct MonoTime {
	i64 ticks;

	Duration sub(MonoTime other) {
		return Duration(ticks - other.ticks);
	}

	/*Duration opBinary[Operator op](MonoTime other) {
		#assert(op == Operator.sub);
		return Duration(ticks - other.ticks);
	}*/
}

MonoTime currTime() {
	i64 counter;
	QueryPerformanceCounter(&counter);
	return MonoTime(counter);
}

Duration subTime(MonoTime a, MonoTime b) {
	return Duration(a.ticks - b.ticks);
}

struct Duration
{
	i64 ticks;

	f64 seconds() {
		i64 freq;
		QueryPerformanceFrequency(&freq);
		return ticks / cast(f64)(_ticksPerSecond);
	}
}

i64 _ticksPerSecond;

T min[T](T a, T b) #inline {
	if (a < b) return a;
	return b;
}

T max[T](T a, T b) #inline {
	if (a > b) return a;
	return b;
}

T clamp[T](T num, T min, T max) #inline {
	if (num < min) return min;
	if (num > max) return max;
	return num;
}

i32 abs(i32 a) #inline {
	if (a < 0) return -a;
	return a;
}

// TODO: almost no error handling being done here
u8[] readFile(u8[] filename) {
	void* hFile = CreateFileA(
		filename.ptr,    // file to open
		GENERIC_READ,    // open for reading
		FILE_SHARE_READ, // share for reading
		null,            // default security
		OPEN_EXISTING,   // existing file only
		FILE_ATTRIBUTE_NORMAL, // normal file
		null);           // no attr. template

	if (hFile == INVALID_HANDLE_VALUE) {
		u8* message = getLastErrorMsg();
		print("[ERROR] Failed to read `", filename, "` ", message.fromStringz);
		freeLastErrorMsg(message);
		return null;
	}

	i64 size;
	if (!GetFileSizeEx(hFile, &size))
	{
		CloseHandle(hFile);
		return null; // error condition, could call GetLastError to find out more
	}


	if (size == 0) {
		CloseHandle(hFile);
		return null; // empty file
	}

	u8[] buffer = makeVoidArray[u8](cast(u64)size);
	u32 bytesRead;
	if (!ReadFile(hFile, buffer.ptr, cast(u32)size, &bytesRead, null))
	{
		u8* message = getLastErrorMsg();
		print("Failed to read ", filename, " ", message.fromStringz);
		freeLastErrorMsg(message);

		freeArray[u8](buffer);
		CloseHandle(hFile);
		return null; // error condition, could call GetLastError to find out more
	}
	CloseHandle(hFile);
	return buffer;
}

u8* getLastErrorMsg() {
	u32 code = GetLastError();
	u8* message;
	FormatMessageA(
		FORMAT_MESSAGE_FROM_SYSTEM |
		FORMAT_MESSAGE_ALLOCATE_BUFFER |
		FORMAT_MESSAGE_IGNORE_INSERTS,
		null,
		code
		0,
		&message,
		0,
		null);
	return message;
}
void freeLastErrorMsg(u8* msg) {
	LocalFree(msg);
}

T[] makeVoidArray[T](u64 length)
{
	if (length == 0) return null;
	T* ptr = cast(T*)mi_malloc(length * T.sizeof);
	return ptr[0..length];
}

T[] makeArray[T](u64 length)
{
	if (length == 0) return null;
	T* ptr = cast(T*)mi_calloc(length, T.sizeof);
	return ptr[0..length];
}

T[] resizeArray[T](T[] array, u64 newLength)
{
	if (newLength == 0) {
		mi_free(array.ptr);
		return null;
	}
	T* ptr = cast(T*)mi_recalloc(array.ptr, newLength, T.sizeof);
	return ptr[0..newLength];
}

T[] freeArray[T](T[] array)
{
	mi_free(array.ptr);
	return null;
}

#if(0)
{
	void memcopy(u8[] dst, u8[] src)
	{
		u64 len = min[u64](dst.length, src.length);
		if (len == 0) return;
		u8* dst_ptr = dst.ptr;
		u8* src_ptr = src.ptr;
		for (u64 i = 0; i < len; ++i)
			dst_ptr[i] = src_ptr[i];
	}
}
else
{
	void memcopy(u8[] dst, u8[] src)
	{
		u64 len = min[u64](dst.length, src.length);
		if (len == 0) return;
		RtlCopyMemory(cast(void*)dst.ptr, cast(void*)src.ptr, len);
	}
	void memcpy(void* dst, void* src, u64 length) {
		if (length == 0) return;
		RtlCopyMemory(dst, src, length);
	}
}

struct Array[T]
{
	T* ptr;
	u32 length;
	u32 capacity;

	void free()
	{
		mi_free(ptr);
		length = 0;
		capacity = 0;
		ptr = null;
	}

	void clear()
	{
		length = 0;
	}

	bool empty() { return length == 0; }

	T* get(u64 index) {
		return &ptr[index];
	}

	T pop() {
		--length;
		return ptr[length];
	}

	T[] data()
	{
		return ptr[0..length];
	}

	void putArray(T[] items)
	{
		if (length + items.length > capacity) extend(cast(u32)items.length);
		for (u32 i = length; i < items.length; ++i)
			ptr[length+i] = items[i];
		length += cast(u32)items.length;
	}

	void put(T item)
	{
		if (length == capacity) extend(1);
		ptr[length] = item;
		++length;
	}

	T* putVoid(u32 numItems)
	{
		if (length == capacity) extend(numItems);
		T* result = &ptr[length];
		length += numItems;
		return result;
	}

	void extend(u32 items)
	{
		enum u32 MIN_CAPACITY = T.sizeof * 4;
		u64 bytesNeeded = (length + items) * T.sizeof;
		u32 capacityNeeded = cast(u32)nextPOT[u32](cast(u32)bytesNeeded);
		capacityNeeded = max[u32](capacityNeeded, MIN_CAPACITY);
		ptr = cast(T*)mi_realloc(ptr, capacityNeeded);
		capacity = cast(u32)(capacityNeeded / T.sizeof);
	}
}

T nextPOT[T](T x)
{
	--x;
	x |= x >> 1;  // handle  2 bit numbers
	x |= x >> 2;  // handle  4 bit numbers
	x |= x >> 4;  // handle  8 bit numbers
	#if (T.sizeof >= 2) x |= x >> 8;  // handle 16 bit numbers
	#if (T.sizeof >= 4) x |= x >> 16; // handle 32 bit numbers
	#if (T.sizeof >= 8) x |= x >> 32; // handle 64 bit numbers
	++x;

	return x;
}

void printString(u8[] str) {
	void* handle = GetStdHandle(STD_OUTPUT_HANDLE);
	//SetConsoleOutputCP(65001);
	u32 numWritten;
	WriteFile(
		handle,
		str.ptr,
		cast(u32)str.length,
		&numWritten,
		null);
}

void printBool(bool b) #inline {
	if (b) printString("true");
	else printString("false");
}

$alias selectPrintFunc($type T) {
	if ($isInteger(T)) {
		if (T == u64) return printUint;
		return printInt;
	}
	if (T == f32) return print_f32;
	if (T == f64) return print_f64;
	if ($isSlice(T)) return printString;
	if ($isPointer(T)) return printPtr;
	if (T == bool) return printBool;
	$compileError("selectPrintFunc: Invalid type");
}

void print[Args...](Args... args) {
	#foreach(i, arg; args) {
		alias func = selectPrintFunc(Args[i]);
		func(arg);
	}
}

void println[Args...](Args... args) {
	#foreach(i, arg; args) {
		alias func = selectPrintFunc(Args[i]);
		func(arg);
	}
	printString("\n");
}

void printArray[T](T[] array)
{
	u64 len = array.length;
	print("[");
	for (u64 i = 0; i < len; ++i)
	{
		if (i > 0)
			print(", ");
		print(array[i]);
	}
	print("]");
}

void setRangeu8(u8[] slice, u8 value) {
	for (u64 i = 0; i < slice.length; ++i) {
		slice[i] = value;
	}
}

enum INT_BUF_SIZE = 66;
void printInt(i64 i, u32 minSize = 1, u8 base = 10)
{
	u8[INT_BUF_SIZE] buf;
	u8[] res = formatInt(i, &buf, 1, base);
	print(res);
}
void printUint(u64 i, u32 minSize = 1, u8 base = 10)
{
	u8[INT_BUF_SIZE] buf;
	u8[] res = formatUint(i, &buf, 1, base);
	print(res);
}

void print_f32(f32 val)
{
	u8[64] buf;
	u8[] res = format_f32(&buf, val);
	print(res);
}

void print_f64(f64 val)
{
	u8[64] buf;
	u8[] res = format_f64(&buf, val);
	print(res);
}

@extern(module, "host") u8[] format_f32(u8[64]* buf, f32 f);
@extern(module, "host") u8[] format_f64(u8[64]* buf, f64 f);

void printPtr(void* ptr) #inline
{
	printString("0x");
	printUint(cast(u64)ptr, 16, 16);
}

u8[] formatInt(i64 i, u8[INT_BUF_SIZE]* output, u32 minSize, u8 base)
{
	u32 numDigits = 0;
	if (i == 0)
	{
		if (minSize == 0)
			minSize = 1;
		setRangeu8((*output)[INT_BUF_SIZE - minSize..INT_BUF_SIZE], ' ');
		(*output)[INT_BUF_SIZE-1] = '0';
		numDigits = minSize;
	}
	else
	{
		bool neg = i < 0;
		if (neg) {
			i = -i;
		}
		bool overflow = i < 0;
		if (overflow)
			i = i64.max;

		if (base <= 10) {
			while (i) {
				u8 c = cast(u8)('0' + i % base);
				(*output)[INT_BUF_SIZE - ++numDigits] = c;
				i /= base;
			}
		} else {
			while (i) {
				u8 c = hexDigitsUpper[i % base];
				(*output)[INT_BUF_SIZE - ++numDigits] = c;
				i /= base;
			}
		}

		while (numDigits < minSize) {
			(*output)[INT_BUF_SIZE - ++numDigits] = ' ';
		}

		if (neg) {
			(*output)[INT_BUF_SIZE - ++numDigits] = '-';
		}
		if (overflow) {
			++(*output)[INT_BUF_SIZE-1];
		}
	}
	return (*output)[INT_BUF_SIZE - numDigits..INT_BUF_SIZE];
}

u8[] formatUint(u64 i, u8[INT_BUF_SIZE]* output, u32 minSize, u8 base)
{
	u32 numDigits = 0;
	if (i == 0)
	{
		if (minSize == 0)
			minSize = 1;
		setRangeu8((*output)[INT_BUF_SIZE - minSize..INT_BUF_SIZE], ' ');
		(*output)[INT_BUF_SIZE-1] = '0';
		numDigits = minSize;
	}
	else
	{
		if (base <= 10) {
			while (i) {
				u8 c = cast(u8)('0' + i % base);
				(*output)[INT_BUF_SIZE - ++numDigits] = c;
				i /= base;
			}
		} else {
			while (i) {
				u8 c = hexDigitsUpper[i % base];
				(*output)[INT_BUF_SIZE - ++numDigits] = c;
				i /= base;
			}
		}

		while (numDigits < minSize) {
			(*output)[INT_BUF_SIZE - ++numDigits] = ' ';
		}
	}
	return (*output)[INT_BUF_SIZE - numDigits..INT_BUF_SIZE];
}

u8[] hexDigitsUpper = "0123456789ABCDEF";

i64 cstrlen(u8* str) {
	if (str == null) return 0;

	u8* start = str;
	while(*str)
	{
		++str;
	}
	return str - start;
}

//
u64 rotl(u64 x, u32 k) #inline {
	return (x << k) | (x >> (64 - k));
}

void init_rand_state(u64[2]* state) {
	state[0][0] = GetTickCount64();
	state[0][1] = 0xac32_ee10_a135_0e00;
	xoroshiro128ss_next(state);
	state[0][1] = GetTickCount64();
}

// xoroshiro128**
// init state to random values before starting
u64 xoroshiro128ss_next(u64[2]* state) {
	u64 s0 = (*state)[0];
	u64 s1 = (*state)[1];
	u64 result = rotl(s0 * 5, 7) * 9;

	s1 ^= s0;
	(*state)[0] = rotl(s0, 24) ^ s1 ^ (s1 << 16); // a, b
	(*state)[1] = rotl(s1, 37); // c

	return result;
}

i64 uniform(i64 a, i64 b, u64[2]* state) // inclusive interval []
{
	i64 distance = b - a;
	u64 rand_num = xoroshiro128ss_next(state);
	i64 interval_pos = cast(i64)(rand_num % cast(u64)distance);
	return a + interval_pos;
}

u8[] compress(u8[] data, u8[] outBuffer)
{
	i32 res = LZ4_compress_default(data.ptr, outBuffer.ptr, cast(i32)data.length, cast(i32)outBuffer.length);
	return outBuffer[0..res];
}
u8[] decompress(u8[] data, u8[] outBuffer)
{
	i32 res = LZ4_decompress_safe(data.ptr, outBuffer.ptr, cast(i32)data.length, cast(i32)outBuffer.length);
	//if (res < 0)
	//{
	//	//println("decompress failed with result ", res, " in ", cast(i64)data.length, " buf ", cast(i64)outBuffer.length);
	//	return null;
	//}
	return outBuffer[0..res];
}
